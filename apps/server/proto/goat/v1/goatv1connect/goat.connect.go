// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: goat/v1/goat.proto

package goatv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "goat/proto/goat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GoatServiceName is the fully-qualified name of the GoatService service.
	GoatServiceName = "goat.v1.GoatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GoatServiceGoatProcedure is the fully-qualified name of the GoatService's Goat RPC.
	GoatServiceGoatProcedure = "/goat.v1.GoatService/Goat"
)

// GoatServiceClient is a client for the goat.v1.GoatService service.
type GoatServiceClient interface {
	Goat(context.Context, *connect.Request[v1.GoatRequest]) (*connect.Response[v1.GoatResponse], error)
}

// NewGoatServiceClient constructs a client for the goat.v1.GoatService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGoatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GoatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	goatServiceMethods := v1.File_goat_v1_goat_proto.Services().ByName("GoatService").Methods()
	return &goatServiceClient{
		goat: connect.NewClient[v1.GoatRequest, v1.GoatResponse](
			httpClient,
			baseURL+GoatServiceGoatProcedure,
			connect.WithSchema(goatServiceMethods.ByName("Goat")),
			connect.WithClientOptions(opts...),
		),
	}
}

// goatServiceClient implements GoatServiceClient.
type goatServiceClient struct {
	goat *connect.Client[v1.GoatRequest, v1.GoatResponse]
}

// Goat calls goat.v1.GoatService.Goat.
func (c *goatServiceClient) Goat(ctx context.Context, req *connect.Request[v1.GoatRequest]) (*connect.Response[v1.GoatResponse], error) {
	return c.goat.CallUnary(ctx, req)
}

// GoatServiceHandler is an implementation of the goat.v1.GoatService service.
type GoatServiceHandler interface {
	Goat(context.Context, *connect.Request[v1.GoatRequest]) (*connect.Response[v1.GoatResponse], error)
}

// NewGoatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGoatServiceHandler(svc GoatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	goatServiceMethods := v1.File_goat_v1_goat_proto.Services().ByName("GoatService").Methods()
	goatServiceGoatHandler := connect.NewUnaryHandler(
		GoatServiceGoatProcedure,
		svc.Goat,
		connect.WithSchema(goatServiceMethods.ByName("Goat")),
		connect.WithHandlerOptions(opts...),
	)
	return "/goat.v1.GoatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GoatServiceGoatProcedure:
			goatServiceGoatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGoatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGoatServiceHandler struct{}

func (UnimplementedGoatServiceHandler) Goat(context.Context, *connect.Request[v1.GoatRequest]) (*connect.Response[v1.GoatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("goat.v1.GoatService.Goat is not implemented"))
}
